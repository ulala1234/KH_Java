# 22/03/02(수) <프로그래밍 언어 응용>(학원 평가일정 기준)

# 이클립스 다운로드

- jdk 다운로드: x64 MSI Installer
- eclipse 다운로드: IDE 설치...
    - 설정: Window - Preferences - General 의 Workspace 에서 Text file encoding 을 Other - UTF-8로 바꾸기
    - 설정2: Window - Preferences - General 의 Appearance 의 Colors and Fonts 에서 Basic 의 Text Font 를 Edit 해서 글씨 크기 변경
    - 설정3: Window - Preferences - Java의 Code Style 의 Formatter에서 New - name: Java con 으로 설정 + Indentation*(들여 쓴 자리)* 의 Tab policy 를 Spaces only로 바꾸기
    

# 프로젝트, 패키지, 클래스 생성

- 프로젝트 만드는 법: Create a Java Project - Project name: Java361 - Module 해제
- 패키지 만드는 법: src 폴더 오른쪽 클릭 - New - Package - Name: day0302
- 클래스 만드는 법: 패키지 오른쪽 클릭 - New - Class - Name: Ex01Hello
- (쌤 파일 Java361Answer 만들어서 src폴더에 넣어서 복습하기)

# 프로그래밍 언어 세대별 분류

- 1세대 언어: 0, 1로 이루어짐 ex) 기계어(machine language)
- ~~2세대 언어-절차 지향 언어: 기계어를 재사용하기 위해 만들어짐 ex) C~~
- ~~3세대 언어-객체 지향 언어: 프로그램을 통째로 사용하기 위해서 만들어짐 ex) Java, C++, 파이썬 등~~
- *2세대 언어: 기계어를 간단한 영어 단어로 프로그래밍 할 수 있게 만듦 ex) 어셈블리어*
- *3세대 언어-절차적 언어: 문법 구조를 이용하여 빠르고 쉽게 프로그래밍이 가능해짐, 고급언어에 속함 ex) C, Java 등*
- *4세대 언어-비절차적 언어: 문장 구조를 이용하여 과정보다는 결과를 도출하는 방식을 씀, 생산성이 높아짐 ex) C++, PL/SQL*
- *5세대 언어-미래 언어, 초고급언어*

### 이클립스 - Java361 - day0302 - Ex01Hello

```java
package day0302;

public class Ex01Hello {
    public static void main(String[] args) {
        System.out.println("Hello, world!!!");
    }
}
```

- public static void main(String[] args { 엔터치고
    
    }
    
    - *public: 모든 곳에서 접근 가능*
    - *static(정적인): 메모리 정리 대상이 아님*
    - *void(빈): 함수 끝나면 리턴 값이 없음*
    - *main: 모든 실행 프로그램의 기본 함수(종료되면 프로그램이 종료된다.)*
    - *String: 문자열*
    - *[]: 배열*
    - *args(arguments): 변수명, 띄어쓰기를 분리자로 인식하는 문자열 배열의 변수*
    - 구조어: 시작하면 끝도 있어야 한다.(기호) ex) ‘ ‘, [ ], { } ...
- 출력: System.out.println(”내용”);
- 실행: 초록색 재생 버튼(Run) 누르거나 Ctrl + F11 누르기 (Save & Launch 를 Always 체크해주기)

### 이클립스 - Java361 - day0302 - Ex02Comment

```java
package day0302;
// 주석(Comment)
// 우리가 자바 소스파일(.java 파일)을 작성할 때에는
// 그 파일이 실행가능한 프로그램의 상태가 아직은 아니다.
// 우리가 소스파일을 저장하고 컴파일 이라는 단계를 거쳐야
// 자바 실행 환경(Java Runtime Environment)라는 가상 컴퓨터에서
// 실행 가능한 프로그램이 만들어진다.

// 우리가 실행 버튼을 누르면 이클립스가 자동으로 컴파일을 해주기 때문에
// 별도로 컴파일을 해줄 필요는 없다.

// 주석이란, 해당 소스파일을 컴파일 할 때
// 실행 가능한 코드가 아니라 단순한 설명으로 인식 되어서
// 변환이 되지 않는 글자들을 우리가 주석이라고 한다.

// 주석에는 우리가 주로 해당 코드에 대한 설명을 적게 된다.

// 주석에는 크게 한줄 주석과 여러줄 주석이 있는데
// 한줄 주석은 //가 나온 이후부터 그 줄이 끝나기 전까지를 모두 주석으로 처리한다.

// 여러줄 주석은 /*로 시작하고 */가 나오기 전까지의 모든 줄들을 주석으로 처리한다.

public class Ex02Comment {
    public static void main(String[] args) {
        System.out.println("1");
        /* 
        System.out.println("2");
        System.out.println("3");
        System.out.println("4");
        */
        System.out.println("5");
    }
}
```

- Java는 소스파일 저장 → 컴파일 → 자바 실행 환경(Java Runtime Environment)(가상 컴) → 실행 가능 프로그램의 순서로 프로그램이 만들어진다.
- 주석 처리
    - //: 한줄 주석
    - /* */: 여러 줄 주석
- 주석 처리를 하면 화면에 뜨지 않는다.

### 이클립스 - Java361 - day0302 - Ex03Naming

```java
package day0302;
// 자바의 명명규칙(Naming Convention)

// 1. 공통규칙
// A. 자바는 대소문자를 엄격하게 구분하는 언어로써,
//    만약 대소문자가 다르면, 다른 존재이다.
// B. 자바의 모든 것들은 _를 제외한 특수문자를
//    이름에 사용할 수 없다.
// C. 이름의 중간 혹은 끝에 숫자가 나올 수 있지만
//    시작할 때에는 숫자가 나올 수 없다.
// D. 자바에서는 내부적으로 사용하는 50여가지의
//    명령어가 존재한다.
//    우리가 그러한 명령어를 키워드라고 부르는데
//    키워드로 이름을 지어줄 수 없다.
//    따라서 여러분들은 해당하는 50여가지의 키워드를
//    모두 암기하셔야 한다!!! -> 내일 7시 시험 -> 옛날 옛적 이야기...
//    이클립스는 키워드를 자주색으로 표시를 해준다.

// 2. 낙타등 표기법(Camel Back Notation)
//    낙타등 표기법이란, 어떤 이름이 여러개의 단어를 이루어져 있을 경우
//    단어 간의 구분을 쉽게하기 위해서 두번째 단어부터는 매 단어의 첫글자를
//    대문자로 적어주는 표기법을 뜻한다.

// 3. 뱀 표기법(Snake Notation)
//    뱀 표기법이란, 모든 철자를 대문자로 적어주는 경우,
//    각 단어의 사이에 _를 넣어서 단어의 구분을 쉽게 할 수 있게 하는 표기법이다.

// 4. 여러가지 종류에 따른 명명 규칙
// A. 클래스의 이름은 대문자로 시작하고 낙타등 표기법을 사용하는 명사이다.
// B. 패키지의 이름은 소문자로 시작하고 명사를 사용하되, 해당 패키지 안에 있는
//    클래스들의 성격을 주로 한단어로 표현한다.
// C. 변수의 이름은 소문자로 시작하고 낙타등 표기법을 사용하는 명사이다.
// D. 상수의 이름은 뱀 표기법을 사용하는 명사이다.
// E. 메소드의 이름은 소문자로 시작하고 낙타등 표기법을 사용하는 동사이다.

public class Ex03Naming {

}
```

1. 패키지: 소문자 시작, 클래스들의 성격을 한단어로
2. 클래스: 대문자 시작, 낙타등
3. 변수: 소문자 시작, 낙타등, 명사
4. 상수: 뱀, 명사
5. 메소드: 소문자 시작, 낙타등, 동사

### 이클립스 - Java361 - day0302 - Ex04Variable

```java
package day0302;
// 변수 (Variable)
// 변수란, 저장되어 있는 값을 다른 값으로 마음껏 덮어씌울 수 있는 저장공간을 뜻한다.
// 프로그래밍에서 우리가 변수를 사용할려면
// 반드시 선언과 초기화 라는 단계를 거쳐서 사용해야한다.

// 선언(Declaration)
// 변수의 선언이란, 해당 변수의 이름이 무엇이고 어떤 종류의 값을 저장 가능한지를
// 프로그램에게 말해주는 코드이다.
// 선언은 다음과 같이 한다.
// 데이터타입 변수이름;
// 데이터타입: 해당 변수에 저장 가능한 값의 종류를 저장한다.

// 초기화(Initialization)
// 변수의 초기화란, 해당 변수에 값을 저장하는 것을 우리가 초기화라고 한다.
// 값의 할당, 값의 저장 이라고도 표현할 수 있으며
// 단, 우리가 해당 변수를 사용하기 위해서는 반드시 최소한 한번은 값이 저장되어야 한다.
// 값의 할당은 다음과 같이 한다.
// 변수이름 = 값;
// 프로그램에서 = 은 오른쪽 값 또는 오른쪽 공간에 저장되어 있는 값을
// 왼쪽 공간에 할당해라 라는 의미이다.

public class Ex04Variable {
    public static void main(String[] args) {
        // int 데이터타입을 가진 변수 number를 선언해보자
        int number;
        // int 변수 number에 20을 할당해보자
        number = 20;
        // 화면에 int 변수 number에 현재 저장된 값을 출력해보자
        System.out.println(number);
        
        // number에 30을 할당해보자
        number = 30;
        // 화면에 int 변수 number에 현재 저장된 값을 출력해보자
        System.out.println(number);
        
        // 변수를 사용할때 알아둬야할 점들
        // 1. 변수의 선언과 초기화는 우리가 한줄로 해줄수도 있다.
        // int 변수 number2를 선언하고 45를 할당해라
        int number2 = 45;
        // int 변수 number2의 현재 값을 화면에 출력해라
        System.out.println(number2);
        
        // 2. 똑같은 이름의 변수는 우리가 여러 번 선언할 수 없다.
        // int 변수 number를 선언하라
        // int number; -> 이미 26번 라인에서 똑같은 이름의 변수를 선언했으므로
        // 같은 이름의 number라는 변수는 선언할 수 없다.
        
        number = 80; // -> 선언하는 코드가 아니라서 문제가 안된다.
        
        // 3. 당연하지만, 선언하지 않은 변수의 값을 저장하거나 호출할 수 없다.
        
        // 4. 값을 할당할 때에는 왼쪽엔 무조건 공간을, 오른쪽엔 저장될 값을 적어야 한다.
        // 3 = number; -> X
        
        // 5. 만약 호환가능한 데이터타입이면
        //    당연히 다른 변수의 값을 변수에 저장할 수도 있다.
        
        // number에 현재 저장된 값을 출력해라
        System.out.println(number);
        // number에 number2에 저장된 값을 저장해라
        number = number2;
        // number에 현재 저장된 값을 출력해라
        System.out.println(number);
    }
    
}
```

- 변수는 선언과 초기화 단계가 필요
    - 선언: 이름, 종류가 뭔지 - 데이터타입 변수이름;
    - 초기화(=값의 할당, 값의 저장) - 변수이름 = 값; (저장된 공간 = 저장된 값에서 ‘=’은 같다가 아니라 O ← O 값의 할당이다.)
    - 한줄로도 가능하다. - 데이터타입 변수이름 = 값;
    - 데이터타입과 일치하는 값만 변수이름 선언이 가능하다.
- (int: 자바의 정수를 표현하기 위한 데이터타입)

### 이클립스 - Java361 - day0302 - Ex05Constant

```java
package day0302;
// 상수(Constant)
// 변수와 마찬가지로 상수도 값을 저장하는 공간이지만,
// 차이점은 상수는 딱 한번만 값을 저장할 수 있다는 것이다.

// 상수는 다음과 같은 형태로 선언한다.
// final 데이터타입 상수이름;

public class Ex05Constant {
    public static void main(String[] args) {
        // int 상수 NUMBER를 선언해보자
        final int NUMBER;
        // NUMBER에 20을 할당해보자
        NUMBER = 20;
        // 화면에 NUMBER의 현재값을 출력해보자
        System.out.println(NUMBER);
        
        // NUMBER에 30을 할당해보자
        // NUMBER = 30; -> 이미 우리가 상수에 20이란 값을 저장했으므로
        // 더이상 새로운 값을 저장할 수 없다.
        // NUMBER = 20; -> 컴퓨터는 기존의 값이 얼마이던 간에
        // 오른쪽 값을 새롭게 저장하려고 하므로 에러가 발생
        
    }
}
```

- 상수는 딱 한 번만 값을 저장할 수 있다.(새로운 값을 저장, 덮어씌우는 것이 안 된다.)
    - 선언: final 데이터타입 상수이름;
    

### 이클립스 - Java361 - day0302 - Ex05DataType

```java
package day0302;
// 자료형(Data Type)
// 자료형이란 해당 공간(변수 혹은 상수)에 어떤 종류의 값을 저장 가능한지를 저장하는 것이다.
// 자료형에는 크게 기본형 데이터타입(Primitive Data Type)과 참조형 데이터타입(Reference Data Type)이 존재한다.
// 기본형 데이터타입: 실제 값을 2진법으로 변환하여 해당 공간에 저장한다.
// 기본형 데이터타입에는 정수형, 실수형, 문자형, 논리형 4가지 종류가 존재한다.
// 정수형: byte short int long
// 실수형: float double
// 문자형: char
// 논리형: boolean
// 기본형 데이터타입은 이렇게 8가지 종류만 존재한다.

// 참조형 데이터타입: 실제 값은 별개의 공간에 저장되고, 변수 혹은 상수에는 그 공간에 접근할 수 있도록
// 별개 공간의 메모리 주소값이 저장이 된다.
// 참조형 데이터타입에는 클래스형, 배열형, 인터페이스형 3가지 종류가 존재한다.
public class Ex06DataType {

}
```

- 자료형
    - 기본형에는 실제 값이 직접 저장된다.
    - 참조형에는 실제 값이 별개 공간에 저장되고 메모리 위치의 정보를 참조해서 값을 가져 온다.
        - 클래스형의 예로는 String이 있다.
        

## 추가: Class 이름 변경, 이클립스 파일 위치, 깃허브 repository 삭제, 깃허브와 이클립스 연동, 깃허브와 이클립스 연동 끊기

- *class 이름 바꾸기: 클래스 오른쪽 클릭 - Refactor - Rename*
- *내 파일 위치: User - eclipseworkspace - Java361 - src*
- *깃허브에 파일 바로 올리는 거 안됨, 잘못 설정 했을 시 깃허브에서 삭제하는 법: Setting - General - Danger Zone - Delete this repository - confirm*
- *깃허브와 이클립스 연동*
    - *깃허브에서 new repository 생성 - Setting - Pages - url 복사*
    - *프로젝트 오른쪽 클릭 - Team - Share Project - Create 해서 경로 지정*
    - *이클립스에서 Window - Show View - Other - Git의 Git Repositories (깃 저장소 나오게 함)*
    - *깃 저장소에서 폴더 오른쪽 클릭 - Remote - Create Remote - Ok - Change - url 넣고 user는 깃허브 닉네임, 비번은 토큰 생성 후 복붙*
        - *토큰 생성: 깃허브 Setting - Developer Setting - Personal Access Tokens - Create New token - 다 체크(리포 빼고(외부에서는 다르게)) - 생성*
        - *git ignore 설정: [gitignore.io](http://gitignore.io) - 개발툴, 언어, 운영체제 입력하고 복사 → gitignore에 붙여넣고 저장*
    - *프로젝트 클릭하면 Unstaged Change 에서 ++ 눌러서 Staged 하기 - Commit 메시지 작성 - Commit & Push*
- *깃에 연결된 repository 끊기: 프로젝트 오른쪽 클릭 - Team - Disconnect 그러고 깃 저장소에서 폴더 오른쪽 클릭 - Delete Repository - Git data만 선택해서 삭제*
