# 22/03/03(목) <프로그래밍 언어 응용>(학원 평가일정 기준)

# 기본형 데이터타입, 참조형 데이터타입 값 저장 차이

- 스택 영역은 메모리에 저장된다.
    - [기본형]은 값 저장 ex) 5
    - [참조형]은 주소값 저장, 힙 영역 참조해서 ex) OXBB 가져옴
- 힙 영역
    - [참조형]은 실제 값 저장 ex) OXBB

### 이클립스 - Java361 - day0303 - Ex01Integer

```java
package day0303;
// 기본형 데이터타입 01
// 정수형 데이터타입

// 정수란?
// 소숫점이 존재하지 않는 온전한 숫자
// 컴퓨터는 디지털 코드로만 값을 저장하므로
// 정수형 데이터타입들인 byte, short, int, long 모두
// 2진법 숫자를 저장하되, 각각 저장할 수 있는 크기가 다르다.

// byte: 8비트. -2의 7승 부터 2의 7승 -1까지 총 2의 8승개의 숫자를 저장 가능.
// short: 16비트. -2의 15승 부터 2의 15승 -1까지 총 2의 16승개의 숫자를 저장 가능.
// int: 32비트. -2의 31승 부터 2의 31승 -1까지 총 2의 32승개의 숫자를 저장 가능.
// long: 64비트. -2의 63승 부터 2의 63승 -1까지 총 2의 64승개의 숫자를 저장 가능.

// 단, 더이상 byte 혹은 short의 사용은 하지 않으므로
// 여러분들은 -20억~+20억일 경우에는 int를, 그보다 큰 수의 경우에는 long을 사용하면 된다.

public class Ex01Integer {

}
```

- 기본형 데이터타입 1. 정수형
    - byte: 8비트, $-2^7$ ~ $2^7-1$
    - short: 16비트, $-2^{15}$ ~ $2^{15}-1$
    - int: 32비트, $-2^{31}$ ~ $2^{31}-1$ (약 -21억~21억)
    - long: 64비트, $-2^{63}$ ~ $2^{63}-1$
    - (비트: 2진법 자리수 1자리를 의미)
- (위의 클래스 탭 더블 클릭하면 최대화 됨)

### 이클립스 - Java361 - day0303 - Ex02RealNumber

```java
package day0303;
// 기본형 데이터타입 02
// 실수형 데이터타입

// 실수란? 
// 소숫점이 있는 숫자

// float: 32비트
// double: 64비트

public class Ex02RealNumber {

}
```

- 기본형 데이터타입 2. 실수형(소숫점 있는 수)
    - float
    - double(자릿수 제한이 없어서 주로 사용)
    

### 이클립스 - Java361 - day0303 - Ex03Character

```java
package day0303;
// 기본형 데이터타입 03
// 문자형 데이터타입

// char은 글자를 뜻하는 character 라는 영어 단어의 줄임말로써,
// 우리는 "차"라고 읽는 것이 아니라 "캐릭터" 라고 읽어야 한다.

// 단, char 데이터타입은 더이상 사용이 되지 않는다.
// 왜냐하면, char 데이터타입의 공간에는 한번에 한개의 글자만 저장이 가능하기 때문이다.

// 따라서 우리는 글자를 저장하고나 표현할 때 표현할 때 char 데이터타입이 아닌
// String 데이터타입을 사용한다.

// 코드 상에서 따옴표와 쌍따옴표의 차이
// 자바 코드 상에서 따옴표는 char 데이터타입의 값을 뜻하며 한번에 한개의 글자만 값에 넣을 수 있다.
// 그에 반해서 쌍따옴표는 String 데이터타입의 값을 뜻하며 한번에 0개 이상의 글자를 저장할 수 있다.

public class Ex03Character {

}
```

- 기본형 데이터타입 3. 문자형
    - char(한번에 1개 글자만 저장 가능해서 사용 잘 안함) - ‘ ‘
        
        → 대신 String 사용(한번에 0개 이상(여러개) 값 저장 가능) - “ “
        
    

### 이클립스 - Java361 - day0303 - Ex04Boolean

```java
package day0303;
// 기본형 데이터타입 04
// 논리형 데이터타입

// 논리형 데이터타입에는 boolean 이라는 데이터타입만 존재하는데
// 이 boolean은 true 혹은 false라는 두가지 값 밖에 존재하지 않는다.

// 다만 실제로는 우리가 boolean 데이터타입의 값을 변수에 따로 저장해서 사용하는 것이 아니라
// 코드 상에서 즉시 결과값을 계산해서 그 결과값 자체를 사용할 때가 대부분이다.

public class Ex04Boolean {

}
```

- 기본형 데이터타입 4. 논리형
    - true
    - false

### 이클립스 - Java361 - day0303 - Ex05PrimitiveTypes*(원시의)*

```java
package day0303;
//기본형 데이터타입 변수를 만들과 값을 저장하고 호출해보는 예제

public class Ex05PrimitiveTypes {
 public static void main(String[] args) {
     // 1. 정수형 데이터타입
     System.out.println("1. 정수형 데이터타입");
     // byte 데이터타입의 변수 myByte를 선언하고 20을 넣어보자
     byte myByte = 20;
     // 화면에 myByte의 현재 값을 출력해보자
     System.out.println(myByte);
     
     // myByte에 만약 byte 범위를 벗어나는 값을 할당하면?
     // myByte = 1000; -> 에러 발생
     
     System.out.println("-------------------");
     System.out.println();
     

     // 2. 실수형 데이터타입
     System.out.println("2. 실수형 데이터타입");
     // double 데이터타입 변수 myDoble을 선언하고 12.345 를 할당
     double myDouble = 12.345;
     // 화면에 myDouble의 현재 값 출력
     System.out.println(myDouble);
     
     // myDouble에 5를 할당
     myDouble = 5;
     // 화면에 myDouble의 현재 값 출력
     System.out.println(myDouble);
     // float 데이터타입의 공간에 값을 저장할 때에는
     // 해당 실수가 float 타입인 것을 컴퓨터에게 알려줘야하므로
     // 값 뒤에 f를 붙여준다.
     
     // float 변수 myFloat 선언
     float myFloat;
     //myFloat에 float 데이터타입의 값 12.3 할당
     myFloat = 12.3f;
     System.out.println(myFloat);
     
     System.out.println("-------------------");
     System.out.println();
     

     // 3. 문자형 데이터타입
     System.out.println("3. 문자형 데이터타입");
     // char 데이터타입의 변수 myCharacter 선언
     char myCharacter;
     // myCharacter에 'A' 할당
     myCharacter = 'A';
     // 화면에 myCharacter의 현재 값 출력
     System.out.println(myCharacter);
     // char는 기본형 데이터타입의 공간이므로
     // 실제로는 해당 글자의 코드 값을 2진법으로 저장한다.
     // 따라서 아래의 코드도 가능하다.
     
     // myCharacter에 int 값 97 저장
     myCharacter = 97;
     // 화면에 myCharacter의 현재 값 출력
     System.out.println(myCharacter);
     
     // 화면에 character 데이터타입의 값을 가진 'AB'를 출력하려고 한다면?
     // System.out.println('AB'); -> character 데이터타입의 값은 한번에 한개의 글자만
     // 제어할 수 있으므로 에러가 발생
     
     System.out.println("-------------------");
     System.out.println();
     

     // 4. 논리형 데이터타입
     System.out.println("4. 논리형 데이터타입");
     
     // boolean 데이터타입의 변수 myBoolean 선언
     boolean myBoolean;
     // myBoolean에 true를 저장
     myBoolean = true;
     // 화면에 myBoolean의 현재 값 출력
     System.out.println(myBoolean);
     // myBoolean에 false를 저장
     myBoolean = false;
     // 화면에 myBoolean의 현재 값 출력
     System.out.println(myBoolean);
     
     System.out.println("-------------------");
     System.out.println();
 }
}
```

- 기본형 데이터타입 예시
    - 선언과 초기화: 데이터타입 변수이름 = 값;
    1. 정수형
        1. byte: 1000이라는 값을 넣으면 에러
    2. 실수형
        1. double: 5라는 int 값을 넣으면 5.0 출력 (실수형 → 정수형은 에러나지만 정수형 → 실수형은 소숫점 붙여주면 됨*(암시적 형변환)*)
        2. float은 값 뒤에 f 붙여줘야 함(안그러면 double로 알아서 에러)
    3. 문자형
        1. char: 97이라는 값 넣어줘도 소문자 a 출력, ‘AB’는 에러 *(각 숫자마다 출력 가능한 문자 다르더라) (변수를 따로 선언과 초기화 안시키고 바로 숫자나 문자를 출력할 수도 있네)*
    4. 논리형

### 이클립스 - Java361 - day0303 - Ex06TypeCasting

```java
package day0303;
// 형 변환(Type Casting)
// 형 변환이란 특정 데이터타입의 값을 다른 데이터타입의 값으로 변경하는 코드를 뜻한다.

// 형 변환에는 크게 암시적 형변환과 명시적 형변환 두가지 종류가 존재한다.

// 암시적 형변환(Implicit Type Casting)
// 암시적 형변환의 경우, 우리가 별도의 코드를 적어주지 않더라도
// 내부적으로 자동으로 형변환을 하는 경우이다.
// 더 작은 데이터타입의 값을 더 큰 데이터타입의 공간에 저장할 때나
// 혹은 정수 데이터타입의 값을 실수형 데이터타입으로 변환할 때 발생된다.

// 명시적 형변환(Explicit Type Casting)
// 명시적 형변환의 경우, 데이터 손실이 발생할 수 있기 때문에
// 우리가 명시적으로 형변환을 하도록 강제하는 경우이다.
// 형변환 시에 데이터 손실이 발생하는 경우는
// 더 큰 데이터타입의 값을 더 작은 데이터타입의 값으로 변환하거나
// 혹은 실수형 데이터타입의 값을 정수형 데이터타입으로 변환할 떄 발생된다.
// 명시적 형변환은 다음과 같이 코드를 적어준다.
// (바꿀 데이터타입)바꿀 값;
// 실수의 소숫점 이하가 사라지거나
// 정수의 경우에는 overflow 혹은 underflow가 발생할 수도 있다.

// 오버플로우: 정수가 표현 가능한 최대값보다 큰 값이 저장되면서
//          값이 오히려 음의 정수로 바뀌는 경우
// 언더플로우: 정수가 표현 가능한 최소값보다 작은 값이 저장되면서
//          값이 오히려 양의 정수로 바뀌는 경우

public class Ex06TypeCasting {
    public static void main(String[] args) {
        //byte 변수 myByte 선언 후 50 저장
        byte myByte = 50;
        
        // 암시적 형변환의 경우
        // 1. 더 작은 데이터타입의 값을 더 큰 데이터타입의 공간에 저장하는 경우
        // int 변수 myInt 선언 후 myByte의 현재 값을 저장
        int myInt = myByte;
        // 화면에 myInt의 현재 값 출력
        System.out.println(myInt);
        
        // 2. 정수형 데이터타입의 값을 실수형 데이터타입으로 변환하는 경우
        // double 변수 myDouble 선언 후 myByte의 현재 값을 저장
        double myDouble = myByte;
        // 화면에 myDouble의 현재 값 출력
        System.out.println(myDouble);
        

        // 명시적 형변환의 경우
        // myInt에 20 저장
        myInt = 20;
        // myDouble에 23.4 저장
        myDouble = 23.4;
        
        // 1. 더 큰 데이터타입의 값을 더 작은 데이터타입의 값으로 변환하는 경우
        // myInt의 값을 byte로 형 변환하여 myByte에 저장
        myByte = (byte)myInt;
        // 화면에 myByte의 현재 값 출력
        System.out.println(myByte);
        
        // 2. 실수형 데이터타입의 값을 정수형 데이터타입의 값으로 변환하는 경우
        // myDouble의 값을 byte로 형 변환하여 myByte에 저장
        myByte = (byte)myDouble;
        System.out.println(myByte);
        
        // 오버플로우
        // myByte에 128을 명시적 형변환하여 저장
        myByte = (byte)128;
        // 화면에 myByte의 현재 값 출력
        System.out.println(myByte);
        
        // 언더플로우
        // myByte에 -130을 명시적으로 형변환하여 저장
        myByte = (byte)-130;
        // 화면에 myByte의 현재 값 출력
        System.out.println(myByte);
        
    }
}
```

- 형변환
    - 암시적 형변환(자동)
        - byte → int, 정수 → 실수
    - 명시적 형변환: (바꿀 데이터타입) 바꿀 값;
        - int → byte, 실수 → 정수
        - byte 범위에 포함되더라도 더 작은 타입이라서 에러, (byte)라고 써줘야 함
    - 오버플로우/언더플로우
        - *byte 값은 -128~127까진데*
        - *언더플로우 예시: (byte)-129는 127이 되고 (byte)-130는 126이 됨*
        - *오버플로우 예시: (byte)128 -128이 되고 (byte)129는 -127이 됨*

### 이클립스 - Java361 - day0303 - Ex07Operator

```java
package day0303;
// 연산자(Operator)
// 연산자란 수학적 기호에 프로그래밍적 코드가 정의되어
// 특정 기호를 사용하면 해당 코드가 실행돼서 결과값을 계산해주는
// 기호들을 연산자라고 한다.

// 연산자에는
// 산술연산자
// 할당연산자
// 비교연산자
// 논리연산자
// 비트연산자
// 다섯가지 종류가 존재한다.

public class Ex07Operator {
    public static void main(String[] args) {
        // 산술연산자
        // 산술연산자는 2가지 값에 대한
        // 수학 연산을 한다.
        // +: 앞의 값과 뒤의 값을 더한 결과값을 구한다.
        // -: 앞의 값에서 뒤의 값을 뺀 결과값을 구한다.
        // *: 앞의 값에서 뒤의 값을 곱한 결과값을 구한다.
        // /: 앞의 값에서 뒤의 값을 나눈 몫을 구한다.
        // %: 앞의 값에서 뒤의 값을 나눈 나머지를 구한다.
        
        // 단, 산술 연산의 경우
        // 정수와 정수끼리의 연산은 결과값이 정수가 나오고
        // 정수와 실수끼리의 연산은 실수가 나온다.
        
        // 1. int 타입의 변수 number1과 number2를 선언하고 각각 3과 5를 저장
        int number1 = 3;
        int number2 = 5;
        // double 타입의 변수 myDouble1과 myDouble2를 선언하고 각각 3과 5를 저장
        double myDouble1 = 3;
        double myDouble2 = 5;
        
        System.out.println("1. 정수끼리의 산술 연산");
        System.out.println(number1 + number2);
        System.out.println(number1 - number2);
        System.out.println(number1 * number2);
        System.out.println(number1 / number2);
        System.out.println(number1 % number2);
        
        System.out.println("------------------------");
        System.out.println();
        
        System.out.println("2. 실수끼리의 산술 연산");
        System.out.println(myDouble1 + myDouble2);
        System.out.println(myDouble1 - myDouble2);
        System.out.println(myDouble1 * myDouble2);
        System.out.println(myDouble1 / myDouble2);
        System.out.println(myDouble1 % myDouble2);
        
        System.out.println("------------------------");
        System.out.println();
        
        System.out.println("3. 정수와 실수끼리의 산술 연산");
        System.out.println(number1 + myDouble2);
        System.out.println(number1 - myDouble2);
        System.out.println(number1 * myDouble2);
        System.out.println(number1 / myDouble2);
        System.out.println(number1 % myDouble2);
        
        System.out.println("------------------------");
        System.out.println();
        
        // 산술연산의 경우
        // 당연히 계산의 우선순위가 일반 수학처럼 적용이 된다.
        // 만약 같은 우선순위에 속할 경우에는
        // 왼쪽에서 오른쪽으로 실행이 된다.
        
        // 번외
        // String 값에 대한 더하기 연산
        // String 값을 더하기 연산할 수 있는데
        // 이 때에는 앞의 값과 뒤의 값을 모두 String 값으로 변환하고
        // 앞의 값 뒤에 뒤의 값을 이어서 한개의 커다란 String 결과 값을 연산하라는 의미가 된다.
        
        // 앞의 String 값 "A"에 뒤의 String 값 "B"를 이어서
        // "AB" 라는 결과값을 만들고
        // 그 결과값을 화면에 출력해라
        System.out.println("A"+"B");
        
        // 앞의 String 값 "A"에 뒤의 int 값 123을 String "123"으로 변환하여
        // "A123"이라는 결과 값을 만들고
        // 그 결과값을 화면에 출력해라
        System.out.println("A"+123);
        
        // 앞의 int 123을 String "123"으로 변환하고
        // 뒤의 "456"을 연결하여
        // "123456" 이라는 결과값을 만들고
        // 그 결과값을 화면에 출력해라
        System.out.println(123+"456");
        
    }
}
```

- 연산자 1. 산술연산자
    - +
        - String도 더하기 연산이 된다.
        - int 123 + String “456” 이면 순서가 int가 먼저 String으로 변환되어 String 더하기 연산의 결과로 123456이 출력된다.
    - -
    - *
    - /: 몫 구해줌(double타입이면 몫으로 소숫점도 나옴)
    - %: 나머지 구해줌
    

### 이클립스 - Java361 - day0303 - Ex08Operator02

```java
package day0303;
// 연산자 02
// 할당 연산자
// 할당 연산자는 앞에 공간에 뒤의 값을 연산한 결과값을
// 할당하는 연산자이다.
// =, +=. -=. *=, /=, %=, ++, --

public class Ex08Operator02 {
    public static void main(String[]args) {
        // int 변수 number 선언
        int number;
        
        // 1. =
        // 앞에 공간에 뒤의 값을 할당해라
        
        // number에 30을 할당해라
        number = 30;
        // number의 현재값을 화면에 출력해라
        System.out.println("number의 현재 값: " + number);
        
        // 2. +=
        // 앞의 공간의 현재 값에 뒤의 값을 더한 결과값을
        // 다시 앞의 공간에 할당해라
        
        // number의 현재 값에 2를 더한 결과값을 다시
        // number에 할당해라
        number += 2;
        // number의 현재값을 화면에 출력해라
        System.out.println("number의 현재 값: " + number);
        
        // 3. *=
        // 앞의 공간의 현재 값에 뒤의 값을 곱한 결과값을
        // 다시 앞의 공간에 할당해라
        
        // number의 현재 값에 4를 곱한 결과값을
        // number에 할당해라
        number *= 4;
        // number의 현재값을 화면에 출력해라
        System.out.println("number의 현재 값: " + number);
        
        // 4. -=
        // 앞의 공간의 현재 값에 뒤의 값을 뺀 결과값을
        // 다시 앞의 공간에 할당해라
        
        // number 현재값에 64를 뺀 결과값을
        // number에 할당해라
        number -= 64;
        // number의 현재값을 화면에 출력해라
        System.out.println("number의 현재 값: " + number);
        
        // 5. /=
        // 앞의 공간의 현재 값에 뒤의 값을 나눈 몫을
        // 다시 앞의 공간에 할당해라
        
        // number의 현재 값에 10을 나눈 몫을
        // number에 할당해라
        number /= 10;
        // number의 현재값을 화면에 출력해라
        System.out.println("number의 현재 값: " + number);
        
        // 6. %=
        // 앞의 공간의 현재 값에 뒤의 값을 나눈 나머지를
        // 다시 앞의 공간에 할당해라
        
        // number의 현재 값에 4를 나눈 나머지를
        // number에 할당해라
        number %= 4;
        
        // number의 현재값을 화면에 출력해라
        System.out.println("number의 현재 값: " + number);
        
        // ++, --
        // ++ 혹은 -- 는 증감연산자라고도 하며
        // 특이하게도 해당 공간에 값을 1 증가시키거나 1 감소시킨다.
        // 단, 변수의 앞에 붙냐 뒤에 붙냐에 따라서
        // 실행 우선순위가 달라진다.
        
        // 전위 증감연산자
        // 만약 ++ 혹은 --가 변수의 앞에 붙어있으면
        // 전위 증감연산자라고 부르며
        // 해당 라인에서 가장 우선순위가 높다.
        // 즉 가장 빨리 실행되는 그룹에 속한다.
        
        // number의 현재 값 출력
        System.out.println("number의 현재 값: " + number);
        // ++number의 결과값을 화면에 출력해보자
        System.out.println("++number: " + ++number);
        // 위의 87번 라인은 한줄로 적혀있지만 실제론 다음과 같은 단계를 거친다.
        // 1. ++number가 실행되서 number의 현재 값이 2에서 1 증가한
        //    3이 된다.
        // 2. "number: " + number가 실행돼서
        //    "number: " 라는 String 값 뒤에 number의 현재 값 3이
        //    "3" 이라는 String 값으로 변환돼서 이어지고
        //    "number: 3" 이라는 String 값이 결과값이 된다.
        // 3. 2번 단계의 결과값인 "number: 3" 이라는 결과값이 화면에 출력된다.
        
        // number의 현재 값 출력
        System.out.println("number의 현재 값: " + number);
        
        // 후위 증감연산자
        // 만약 ++ 혹은 --가 변수의 뒤에 붙어있으면
        // 후위 증감연산자라고 부르며
        // 해당 라인에서 가장 우선순위가 낮다.
        // 즉 가장 늦게 실행되는 그룹에 속한다.
        
        // number의 현재 값 출력
        System.out.println("number의 현재 값: " + number);
        // number++의 결과값을 화면에 출력해보자
        System.out.println("number++: " + number++);
        // 위의 코드를 단계별로 나누면 다음과 같다.
        // 1. "number++: " + number 가 실행되서
        //    "number++: " 뒤에 number의 현재 값 int 3이 String "3" 으로 변환돼서
        //    이어지고 "number++: 3" 이라는 String 값이 결과값이 된다.
        // 2. 1번의 결과 값인 "number++: 3"이 화면에 출력된다.
        // 3. number++이 실행돼서 number의 현재값이 3에서 1 증가한
        //    4가 된다.
        
        // number의 현재 값 출력
        System.out.println("number의 현재 값: " + number);
        
        // 번외
        // String 변수의 경우 더하기 할당연산이 가능하다.
        // 해당 공간의 현재 String 값에 뒤의 값을 String으로 이어서 나온
        // 결과값을 다시 String 변수에 할당한다.
        
        // String 변수 name을 선언하고 "권" 이라는 값을 할당한다.
        String name = "권";
        // name의 현재값을 화면에 출력한다.
        System.out.println("name의 현재값: " + name);
        // name의 현재 값에 "은" 을 이어 붙인 결과값을
        // 다시 name에 할당한다.
        name += "은";
        // name의 현재값을 화면에 출력한다.
        System.out.println("name의 현재값: " + name);
                
        
        
        
        
        
    }
}
```

- 연산자 2. 할당연산자
    - =
    - +=: 앞의 값 + x
        - String 값도 더하기 할당 연산이 된다.
    - -=: 앞의 값 - x
    - *=: 앞의 값 * x
    - /=: 앞의 값 / x 의 몫
    - %=: 앞의 값 / x 의 나머지
    - ++: 앞의 값 + 1
        - ++변수: 전위 증감연산자(우선순위 가장 높음): number 먼저 증감 → String 변환 → 출력
        - 변수++: 후위 증감연산자(우선순위 가장 낮음): String 변환 → 출력 → number 후에 증감
    - —: 앞의 값 - 1
        - —변수: 전위 증감연산자(우선순위 가장 높음)
        - 변수—: 후위 증감연산자(우선순위 가장 낮음)
    

### 이클립스 - Java361 - day0303 - Ex09Operator03

```java
package day0303;
// 연산자 03
// 비교연산자

// 비교연산자는 2개의 값을 비교한다.

public class Ex09Operator03 {
    public static void main(String[]args) {
        // int number1 을 선언하고 5를 저장하자
        int number1 = 5;
        // int number2 를 선언하고 8을 저장하자
        int number2 = 8;
        
        // < 은 왼쪽 값이 오른쪽 값보다 작으면 true, 그 외에는 false가 연산된다.
        // < 은 왼쪽 값이 오른쪽 값보다 크면 true, 그 외에는 false가 연산된다.
        System.out.println("1. <, > ");
        System.out.println("number1 < 100: " + (number1 < 100));
        System.out.println("number2 < number1: " + (number2 < number1));
        System.out.println("number1 < 5: " + (number1 < 5));
        
        // <= 은 왼쪽 값이 오른쪽 값보다 작거나 같으면 true, 그 외에는 false가 연산된다.
        // <= 은 왼쪽 값이 오른쪽 값보다 크거나 같으면 true, 그 외에는 false가 연산된다.
        System.out.println("2. <=, >=");
        System.out.println("number1 >= 100: " + (number1 >= 100));
        System.out.println("number2 >= number1: " + (number2 >= number1));
        System.out.println("number1 >= 5: " + (number1 >= 5));
        
        // == 은 왼쪽 값과 오른쪽 값이 같으면 true, 아니면 false가 연산된다.
        System.out.println("3. ==");
        System.out.println("number1 == 5: " + (number1 == 5));
        System.out.println("number1 == number2: " + (number1 == number2));
        
        // != 은 왼쪽 값과 오른쪽 값이 다르면 true, 아니면 false가 연산된다.
        System.out.println("4. !=");
        System.out.println("number1 != 5: " + (number1 != 5));
        System.out.println("number1 != number2: " + (number1 != number2));
        
        System.out.println("-------------------------");
        System.out.println();
        
        // 단, 비교연산자의 경우 참조형 데이터타입에 대해서는 부정확한 값이 연산될 수 있기 때문에
        // 참조형 데이터타입에 대해서는 비교연산자를 사용해선 안된다.
        
        // String 변수 string1을 선언하고 "abc"를 할당한다.
        String string1 = "abc";
        // String 변수 string2를 선언하고 "abc"를 할당하되, 다른 방법으로 할당한다.
        String string2 = new String("abc");

        // String 변수 string3을 선언하고 string1의 현재 값을 저장한다.
        String string3 = string1;       
        
        // string1, string2, string3에 같은 글자들만 들어가있는지 확인하기 위해
        // ###의 현재 값: [###] 의 형태로 출력되게 코드를 작성한다.
        System.out.println("string1의 현재 값: [" + string1 + "]");
        System.out.println("string2의 현재 값: [" + string2 + "]");
        System.out.println("string3의 현재 값: [" + string3 + "]");
        
        // string1과 string2
        // string1과 string3
        // string2과 string3을
        // == 비교연산자를 통하여 비교한 결과값을 화면에 출력
        System.out.println("string1 == string2: " + (string1 == string2));
        System.out.println("string1 == string3: " + (string1 == string3));
        System.out.println("string2 == string3: " + (string2 == string3));
  
        // 비교연산자는 Stack 영역의 저장되어있는 값만 비교한다.
        // 기본형 데이터타입의 경우, Stack 영역에 실제 값이 저장되기 때문에
        // 비교연산자를 통한 비교가 정확하지만
        // 참조형 데이터타입은 Stack 영역에 주소값이 저장된다.
        // 실제 값을 비교하려면 해당 주소값을 참조해서
        // 그 주소값에 해당하는 heap 영역 안에 실제 값을 비교해야하지만
        // 비교연산자는 그렇게 하는 대신, stack 영역에 저장된 주소값을 토대로 해서 비교를 한다.
        // 즉, string1, string2, string3은 모두 "abc"라는 실제 값을 가지고 있지만
        // string2의 주소값은 string1과 다르고 string3은 string1의 주소값을 그대로 가져왔기 때문에
        // 비교연산자가 string1과 string2, string2와 string3은 서로 일치하지 않는다 라는 연산을
        // 하게 되는 것이다.
        
        // 따라서, 우리가 참조형 데이터타입의 공간들의 실제 값 비교를 위해서는 비교연산자를 사용해선 안된다.
        // 대신 해당 공간의 equals() 라는 메소드를 통하여
        // 실제 값 비교를 실행해야 한다.
        // equals 메소드는 다음과 같은 방법으로 사용한다.
        // 변수이름.equals(비교대상)
        System.out.println("string1.equals(string2): " + string1.equals(string2));
        System.out.println("string1.equals(string3): " + string1.equals(string3));
        System.out.println("string2.equals(string3): " + string2.equals(string3));
       
    }

}
```

- 연산자 3. 비교연산자
    - < , >
        - 연산 하는 곳 괄호 치는 이유: 괄호 안 치면 int 변수 number1이 String 값이 돼서 100과 비교가 안된다.
    - <=, >=
    - ==: 값이 같냐
    - !=: 값이 다르냐
    - 비교연산자는 참조형 데이터타입에서 부정확하다(Stack 영역의 값만 비교하기 때문)
        - *new String으로 다른 할당하지 않고 일반적으로 할당하면 주소값이 같아서 true 뜸*
        - → equals() 메소드 사용: 변수 이름.equals(비교대상)
    

### 이클립스 - Java361 - day0303 - Ex10Operator04

```java
package day0303;
// 연산자 04
// 논리연산자

// 논리연산자는 boolean 데이터타입의 값에 대한 연산을 한다.
public class Ex10Operator04 {
    public static void main(String[]args) {
        // 1. AND 연산자
        //    왼쪽의 값과 오른쪽의 값이 모두 true일때만
        //    true가 결과값으로 연산된다.
        System.out.println("1. AND 연산자");
        System.out.println("true && true: " + (true && true));
        System.out.println("true && false: " + (true && false));
        System.out.println("false && true: " + (false && true));
        System.out.println("false && false: " + (false && false));
        
        // 2. OR 연산자
        //    OR 연산자는 둘 중 하나라도 true 이면
        //    true가 결과값으로 연산이 된다.
        System.out.println("2. OR 연산자");
        System.out.println("true || true: " + (true || true));
        System.out.println("true || false: " + (true || false));
        System.out.println("false || true: " + (false || true));
        System.out.println("false || false: " + (false || false));
        
        // 3. NOT 연산자
        //    NOT 연산자는 해당 boolean 값의 반댓값을 연산한다.
        System.out.println("3. NOT 연산자");
        System.out.println("!true: " + !true);
        System.out.println("!false: " + !false);
        
        // 논리연산자의 경우, 여러개의 boolean을 연산해서
        // 우리가 원하는 결과를 얻어내는데 사용이 되는데,
        // 대표적으로 어떤 값이 특정 범위에 속하는지 연산하는 경우,
        // 우리가 반드시 논리연산자를 사용해야 한다.
        // 0 <= x <= 10
        int x = 5;
        // System.out.println(0 <= x <= 10);
        // 위의 코드는 먼저 0 <= x가 실행돼서
        // true 혹은 false의 값을 가진 boolean 데이터타입의 결과값이
        // 나오게 된다.
        // 하지만 그 후에 해당 결과값을 10보다 작거나 같은지 비교하려고 한다면
        // true 혹은 false를 10과 비교할 수 없으므로
        // 위 코드는 에러가 발생한다.
        // 따라서 우리는 위의 코드를 논리연산자를 사용하여
        // x가 0 이상 10 이하인지를 확인해야 한다.
        
        // 특정 범위에 속한다는 것은
        // x가 해당 범위의 최소값 보다 크다
        // x가 해당 범위의 최대값 보다 작다
        // 이 2가지 조건을 모두 만족하므로, 즉 모두 true가 나올 때에만
        // true가 나와야 하므로
        // 우리는 AND 연산자를 사용하여
        // 해당 조건이 맞는지를 확인해야 한다.
        System.out.println("x >= 0 && x <= 10: " + (x >= 0 && x <= 10));    
        
    }

}
```

- 연산자 4. 논리연산자
    - &&
        - AND: 둘 다 true여야 true
        - (노란줄 이유: 이미 앞에 false가 있으면 뒤의 조건 볼 필요 없어서)
    - ||
        - Shift + \ (백슬러시, 역슬러시)
        - OR: 둘 중 하나 true면 true
        - (노란줄 이유: 이미 앞에 true가 있으면 뒤의 조건 볼 필요 없어서)
    - !
        - NOT: 해당 boolean의 반대값
    - 특정 범위에 속하는지 연산하는 경우 논리연산자 사용
    (비교연산자 쓸 땐 변수가 왼쪽에 위치)
    

### 이클립스 - Java361 - day0303 - Ex11Print

```java
package day0303;
// 자바 콘솔화면에 출력하는 3가지 방법
// 우리가 지금까지는 화면에 출력을 할 때
// println()만 사용을 했지만
// 사실 다른 몇가지 방법으로도 우리가 화면에 출력을 할 수 있다.
// 우리는 그 중에서 대표적인 3가지 방법을 알아볼 것이다!

public class Ex11Print {
    public static void main(String[]args) {
        // 출력에 사용할 String 변수 string1과 string2를 선언하고
        // 각각 "abcd"와 "EFGH"를 할당한다.
        String string1 = "abcd";
        String string2 = "EFGH";
        
        // 1. print()
        // print()는 괄호 안의 내용을 출력하고
        // 만약 그 다음에 출력할 내용이 있으면 출력된 내용이
        // 오른쪽 한칸 옆부터 출력을 시작한다.
        System.out.print(string1);
        System.out.print(string2);
        
        // 2. println()
        // println()은 "print a line"의 줄임말로써
        // 괄호 안의 내용을 출력하고
        // 만약 그 다음에 출력할 내용이 있으면
        // 출력된 내용의 다음 줄 첫번째 칸부터 출력을 시작한다.
        System.out.println(string1);
        System.out.println(string2);
        
        // 3. printf()
        // printf()는 "print in format"의 줄임말로써
        // 괄호 안의 내용을 형식에 맞추어 출력하고
        // 만약 그 다음에 출력할 내용이 있으면
        // 출력된 내용의 오른쪽 칸부터 출력을 시작한다.
        System.out.printf("%s", string1);
        System.out.printf("%s", string2);
        

        System.out.println();        
        //4. 이스케이프 문자
        // 이스케이프 문자란, 자바에서 다른 기능이 정의되어있는
        // 문장부호들을 의미 그대로 사용할 수 있게
        // \와 조합하여 한개의 문자로 만들어둔 특수 문자들이다.
        // 개행문자, 탭공백, ', ", \ 등 다양한 특수 문자들이 존재한다.
        
				// 4-1. 개행문자
        // 개행문자는 해당문자를 출력하면 무조건
        // 다음줄 첫번째 칸으로 넘어간다.
        // \n으로 적는다.
        System.out.print(string1 + "\n");
        System.out.print(string1 + "\n" + string2 + "\n");
        
        // 4-2. 탭 공뱁
        // 탭 공백은 약 스페이스 4개 분량의
        // 커다란 공백을 뜻한다.
        // \t로 적는다.
        System.out.println(string1 + '\t' + string2);
        
        // 4-3. 따옴표
        // 만약 우리가 따옴표를 char 값의 시작 혹은 끝의 의미로 쓰는 것이 아니라
        // 문장기호로써의 따옴표를 사용하고 싶다면
        // \' 라고 적어주어야 한다.
        
        System.out.println('\'');
        
        // 4-4. 쌍따옴표
        // 만약 우리가 쌍따옴표를 String 값의 시작 혹은 끝의 의미로 쓰는 것이 아니라
        // 문장기호로써 쌍따옴표를 사용하고 싶다면
        // \"라고 적어주어야 한다.
        
        // "내 사전에 불가능은 없다!" - 나폴레옹
        System.out.println("\"내 사전에 불가능은 없다!\" - 나폴레옹");
        
        // 4-5. 역 슬러시
        // 역 슬러시의 경우, 우리가 문장기호로 사용되는 것이 아니라
        // 주로 파일 경로로써 사용이 된다.
        // 그렇다면 우리가 \를 String에 넣어서
        // 특정 파일 경로를 화면에 출력하고 싶다면 어떻게 해야할까?
        System.out.println("C:\\내문서\\내프로젝트");
    }

}
```

- 화면 출력
    - print(): 바로 옆에
    - println(): 다음 줄에
    - printf(형식, 내용): 바로 옆에, 형식에 맞춰서
    - 이스케이프 문자: 자바에서 다른 기능으로 쓰이던 문장부호들을 의미 그대로 사용할 수 있게 함(하나의 문자로 취급)
        - 개행문자: 다음 줄로 넘어가라
            - \n
        - 탭 공백: 스페이스 4개 분량의 공백
            - \t
        - (문장기호로써) 따옴표: \’, 쌍따옴표: \”
        - (파일의 경로를 나타낼 때) 역슬러시: \\

### 이클립스 - Java361 - day0303 - Ex12Printf

```java
package day0303;
// printf를 사용하여 내가 출력할 내용을 다양한
// 형식에 맞추는 방법들
//
public class Ex12Printf {
    public static void main(String[] args) {
        // int 변수 number를 선언하고 47을 할당하자
        int number = 47;
        
        // 1. 10진법 정수('D'ecimal)
        // 1-A. 10진법 정수를 그대로 출력하라
        System.out.printf("1-A. [%d]\n", number);
        // 1-B. 10진법 정수를 오른쪽 정렬 4자리로 출력해라
        System.out.printf("1-B. [%4d]\n", number);
        // 1-C. 10진법 정수 12345를 오른쪽 정렬 4자리로 출력해라
        System.out.printf("1-C. [%4d]\n", 12345);
```

- printf 형식과 방법
    - 10진법 정수(decimal)*(10진법의)*
        - %d: 그대로 출력
        - %4d: 오른쪽 정렬 4자리로 출력
            - *지정한 자릿수보다 값이 적으면 빈공간 발생*
            - 지정한 자릿수보다 값이 많으면 자릿수는 무시된다.

- USB에 저장하는 법: Package Explorer창 → src오른쪽 클릭 - Show In - System Explorer → src폴더 옮기기
